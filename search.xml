<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MyBatis随笔]]></title>
    <url>%2F2019%2F05%2F21%2FMyBatis%E9%9A%8F%E7%AC%94%2F</url>
    <content type="text"><![CDATA[MyBatis随笔什么是MyBatis?MyBatis 是一款优秀的持久层框架，针对JDBC技术进行了封装。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录 为什么要学习MyBatis? JDBC技术进行一个对比 JDBC代码冗余，除了sql命令不一样，其他地方基本相同 JDBC中的查询方法，对于结果集的数据封装，需要手动创建实体类对象 JDBC技术自身没有提供 “连接池” 功能 JDBC技术没有提供 “缓存” 功能 MyBatis框架是一个基于持久层的框架，是对我们现有代码JDBC的合理封装，解决的是我们开发过程中数据库持久层（DAO）的问题，MyBatis为我们提供了一种全新的机制来替换我们原有的jdbc功能 ##MyBatis开发步骤： 搭建开发环境 导入jar包 ojdbce6.jar(JDBC连接数据库所需的驱动jar) mybatis.jar(mybatis所需的核心jar) log4j.jar(打印输出日志文件) 引入配置文件 mybatis-config.xml( mybatis的核心配置文件) mapper.xml(mapper映射文件) log4j.properties(打印日志的相关配置文件) 初始化配置 mybatis-config.xml(配置当前数据库运行环境) 建表 创建实体化对象 定义DAO接口 配置Mapper映射文件(取代的是DAO接口的实现类) 注册Mapper映射文件 获取Mapper映射文件所提供的实现类对象(工具类SqlSession) mybatis-config.xml 初始化配置1234567891011121314151617181920212223&lt;!-- mybatis的所有配置都必须定义在configuration标签里 --&gt;&lt;configuration&gt; &lt;!-- 配置mybatis运行环境，如果需要连接多个数据库，则需要多个enviroment标签 --&gt; &lt;environments default="d1"&gt; &lt;!--配置一个mybatis的运行环境，id属性是这个环境的唯一标识。 --&gt; &lt;environment id="d1"&gt; &lt;!--设置mybatis完成数据库操作时事务的提交策略，type属性值为"JDBC",表示用Jdbc事务提交方式提交。 --&gt; &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt; &lt;!--配置数据库连接，type属性值为“POOLED”，表示使用mybatis内置连接池 --&gt; &lt;dataSource type="POOLED"&gt; &lt;!--数据库驱动 --&gt; &lt;!-- 通过$&#123;&#125; 进行对小配置文件取值 --&gt; &lt;property name="driver" value="oracle.jdbc.OracleDriver"&gt;&lt;/property&gt; &lt;!--数据库连接 --&gt; &lt;property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"&gt;&lt;/property&gt; &lt;!--数据库用户 --&gt; &lt;property name="username" value="hr"&gt;&lt;/property&gt; &lt;!--数据库密码 --&gt; &lt;property name="password" value="hr" /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt;&lt;/configuration&gt; 配置Mapper映射文件123456&lt;mapper namespace="dao.StudentDAO"&gt; &lt;!-- id 指的是当前namespace中的dao接口的方法名 resultType是指dao方法的返回值类型，如果返回的是对象，填写它的完整实体类名--&gt; &lt;select id="queryall" resultType="entity.student"&gt; select * from t_student &lt;/select&gt;&lt;/mapper&gt; 映射文件的标签中有四个子标签，分别对应增、删、改、查四种dao方法： &lt;insert id=&quot;&quot;&gt;&lt;/insert&gt; //增 &lt;delete id=&quot;&quot;&gt;&lt;/delete&gt; //删 &lt;update id=&quot;&quot;&gt;&lt;/update&gt; //改 &lt;select id=&quot;&quot;&gt;&lt;/select&gt; //查 标签中填写的是所对应的sql语句，id的值为dao方法名，如果有返回值加入resultType属性 注册Mapper打开mybatis-config.xml配置文件，在 &lt;configuration&gt;标签内，&lt;environments&gt;标签外加入以下代码：123&lt;mappers&gt; &lt;mapper resource=&quot;mapper.xml&quot; /&gt;&lt;/mappers&gt; 我的理解是使框架可以找到Mapper映射文件，使上面的配置生效 获取Mapper映射文件所提供的实现类对象Talk is cheap,show me the code.1234567891011 //mapper映射文件+sqlsession工具类 = 获取StudentDAO接口的实现类 //获取sqlsessionfactorybuilder 工厂创建者SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();//加载数据库运行环境的配置文件 需要提供mybatis-config.xml配置文件的路径作为参数Reader rs = Resources.getResourceAsReader("mybatis-config.xml");//获取factory对象，并将mybatis-config.xml配置相关信息封装到factory对象中SqlSessionFactory factory = builder.build(rs);//通过factory对象生产所需要的sqlsession 工具类SqlSession sqlsession = factory.openSession();//将所需要的接口实现类的接口类对象作为参数StudentDAO dao = sqlsession.getMapper(StudentDAO.class);//StudentDAOimpl]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo+GitHub搭建自己的博客]]></title>
    <url>%2F2019%2F05%2F21%2F%E4%BD%BF%E7%94%A8Hexo-GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用Hexo+GitHub搭建自己的博客 安装Hexo 准备工作 安装Node.js 安装Git 配置Hexo 搭建GitHub博客 准备工作 创建仓库 配置SSH key 上传到GitHub 常用Hexo命令1.安装Hexo准备工作在安装Hexo之前需要确定电脑已经安装好下列程序： Node.js Git 安装好上述环境之后，使用npm安装Hexo $ npm install -g hexo 具体操作打开上面安装的Git bash窗口，输入上述代码，按下回车 Hexo已经安装完成，下面我们创建自己的博客站点，请执行下列命令，Hexo会自动在Git bash的当前目录创建所需文件 ps：可以在Git bash中通过（cd+路径）的命令进入目标文件夹，也可以直接在目标文件夹中通过右键菜单打开Git bash窗口，然后再执行下列命令 $ hexo init &lt;folder&gt; &lt; folder &gt;表示站点的名字，不加这个选项的话就是在当前文件夹生产所需文件，也就是当前文件夹为博客的站点新建完成后，指定文件夹的目录如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml网站的 配置 信息，您可以在此配置大部分的参数。 package.json应用程序的信息。 scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。 配置Hexo我们可以在站点目录里的_config.yml配置文件中配置网站的一些基本信息，下面列出一些常见配置： 123456title: taozi #网站标题subtitle: Finsh what we started #网站副标题description: Starting today,a new life begins. #网站描述author: taozi #您的名字language: zh-CN #网站使用的语言theme: next #当前主题名称 ps：上面代码的冒号后面要加一个空格 现在我们可以预览一下当前博客的效果 在博客的站点文件夹中打开Git bash窗口，执行下面代码： 123$ npm install hexo-server --save #安装 hexo-server$ hexo g # 自动生成html文件$ hexo s # 启动服务 这时网站就部署到我们本地的服务器上，可以在浏览器地址栏输入http://localhost:4000/访问 如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下 $ hexo s -p 5000 2.搭建GitHub博客准备工作 注册一个GitHub账号 安装好上面环境创建仓库登录你的GitHub，创建一个名为你的用户名.github.io的仓库，比如我的GitHub的用户名是GodTaoz,那我创建的仓库名就是GodTaoz.github.io，将来就是通过http://GodTaoz.github.io访问我的博客###配置SSH key我对SSH key的理解就是通过SSH协议让本地的电脑与你GitHub库取得连接，可以在本地远程管理库中的代码，而且提高了安全性 打开Git bash窗口，输入： ssh-keygen -t rsa -C &quot;邮箱地址&quot; 然后连续按三次回车，最终会在用户目录下生成.ssh文件夹，进入其中，用文本编辑器打开id_rsa.pub文件，复制全部内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，将刚复制的内容粘贴到key那里，title随便填 测试是否成功输入以下代码： $ ssh -T git@github.com # 注意邮箱地址不用改 根据提示Are you sure you want to continue connecting (yes/no)?输入yes如果出现Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.即成功 ####账号和邮箱设置为Git配置GitHub的账号和邮箱：12$ git config --global user.name "GodTaoz"// 你的github用户名，非昵称$ git config --global user.email "xxx@qq.com"// 填写你的github注册邮箱 上传到GitHub 配置SSH key 配置_config.yml SSH key上面已经配置完成，打开站点根目录中的_config.yml配置文件，配置deploy部分，如下： 1234deploy: type: git repository: git@github.com:GodTaoz/GodTaoz.github.io.git branch: master 配置完成后，在博客的站点文件夹下右键 -&gt; Git bash here打开Git bash窗口，输入命令： 123$ npm install hexo-deployer-git --save #安装插件$ hexo g #生成静态页面至public目录$ hexo d #部署到GitHub 然后通过http://localhost:4000/就可以访问到 3.常用Hexo命令常见命令 1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写 1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令 12hexo s -g #生成并本地预览hexo d -g #生成并上传 参考：https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>hello</tag>
        <tag>wrold</tag>
      </tags>
  </entry>
</search>
